<?xml version="1.0"?>
<!DOCTYPE language SYSTEM "language.dtd" [
<!ENTITY identifier "[a-zA-Z][a-zA-Z0-9\-_']*">
]>
<!--
  Author: Anders Lund <anders@alweb.dk>
  Minor changes: Joseph Wenninger <jowenn@kde.org>
  Full JavaScript 1.0 support by Whitehawk Stormchaser

  Last Update: Nov. 20, 2019 (Version 14)

  IMPORTANT: This syntax highlighting definition depends on
  JavaScript React (JSX), TypeScript and QML.
-->
<language name="Nix" version="14" kateversion="5.0" section="Scripts" extensions="*.nix" indenter="cstyle" priority="1" author="Dawid Sowa (dawid_sowa@posteo.net)" license="">
  <highlighting>
    <list name="alerts">
      <item>FIXME</item>
      <item>NOTE</item>
      <item>TODO</item>
      <item>OPTIMIZE</item>
      <item>XXX</item>
      <item>HACK</item>
    </list>
    <list name="SimpleBuiltins">
      <item>abort</item>
      <item>baseNameOf</item>
      <item>derivation</item>
      <item>derivationStrict</item>
      <item>dirOf</item>
      <item>fetchGit</item>
      <item>fetchMercurial</item>
      <item>fetchTarball</item>
      <item>import</item>
      <item>isNull</item>
      <item>map</item>
      <item>placeholder</item>
      <item>removeAttrs</item>
      <item>scopedImport</item>
      <item>throw</item>
      <item>toString</item>
    </list>
    <list name="NamespacedBuiltins">
      <item>builtins.abort</item>
      <item>builtins.functionArgs</item>
      <item>builtins.pathExists</item>
      <item>builtins.add</item>
      <item>builtins.genList</item>
      <item>builtins.placeholder</item>
      <item>builtins.addErrorContext</item>
      <item>builtins.genericClosure</item>
      <item>builtins.readDir</item>
      <item>builtins.all</item>
      <item>builtins.getAttr</item>
      <item>builtins.readFile</item>
      <item>builtins.any</item>
      <item>builtins.getEnv</item>
      <item>builtins.removeAttrs</item>
      <item>builtins.attrNames</item>
      <item>builtins.hasAttr</item>
      <item>builtins.replaceStrings</item>
      <item>builtins.attrValues</item>
      <item>builtins.hasContext</item>
      <item>builtins.scopedImport</item>
      <item>builtins.baseNameOf</item>
      <item>builtins.hashString</item>
      <item>builtins.seq</item>
      <item>builtins.head</item>
      <item>builtins.sort</item>
      <item>builtins.catAttrs</item>
      <item>builtins.import</item>
      <item>builtins.split</item>
      <item>builtins.compareVersions</item>
      <item>builtins.intersectAttrs</item>
      <item>builtins.splitVersion</item>
      <item>builtins.concatLists</item>
      <item>builtins.isAttrs</item>
      <item>builtins.storeDir</item>
      <item>builtins.concatStringsSep</item>
      <item>builtins.isBool</item>
      <item>builtins.storePath</item>
      <item>builtins.currentSystem</item>
      <item>builtins.isFloat</item>
      <item>builtins.stringLength</item>
      <item>builtins.currentTime</item>
      <item>builtins.isFunction</item>
      <item>builtins.sub</item>
      <item>builtins.deepSeq</item>
      <item>builtins.isInt</item>
      <item>builtins.substring</item>
      <item>builtins.derivation</item>
      <item>builtins.isList</item>
      <item>builtins.tail</item>
      <item>builtins.derivationStrict</item>
      <item>builtins.isNull</item>
      <item>builtins.throw</item>
      <item>builtins.dirOf</item>
      <item>builtins.isString</item>
      <item>builtins.toFile</item>
      <item>builtins.div</item>
      <item>builtins.langVersion</item>
      <item>builtins.toJSON</item>
      <item>builtins.elem</item>
      <item>builtins.length</item>
      <item>builtins.toPath</item>
      <item>builtins.elemAt</item>
      <item>builtins.lessThan</item>
      <item>builtins.toString</item>
      <item>builtins.false</item>
      <item>builtins.listToAttrs</item>
      <item>builtins.toXML</item>
      <item>builtins.fetchGit</item>
      <item>builtins.map</item>
      <item>builtins.trace</item>
      <item>builtins.fetchMercurial</item>
      <item>builtins.match</item>
      <item>builtins.true</item>
      <item>builtins.fetchTarball</item>
      <item>builtins.mul</item>
      <item>builtins.tryEval</item>
      <item>builtins.fetchurl</item>
      <item>builtins.nixPath</item>
      <item>builtins.typeOf</item>
      <item>builtins.filter</item>
      <item>builtins.nixVersion</item>
      <item>builtins.unsafeDiscardOutputDependency</item>
      <item>builtins.filterSource</item>
      <item>builtins.null</item>
      <item>builtins.unsafeDiscardStringContext</item>
      <item>builtins.findFile</item>
      <item>builtins.parseDrvName</item>
      <item>builtins.unsafeGetAttrPos</item>
      <item>builtins.foldl'</item>
      <item>builtins.partition</item>
      <item>builtins.valueSize</item>
      <item>builtins.fromJSON</item>
      <item>builtins.path</item>
      <item>builtins.concatStringsSep</item>
    </list>
    <list name="primitives">
      <item>false</item>
      <item>null</item>
      <item>true</item>
    </list>
    <contexts>
      <context attribute="Error" lineEndContext="#stay" name="Expression">
        <!--Paths-->
        <RegExpr String="[a-zA-Z0-9._+\-]*(/[a-zA-Z0-9._+-]+)+" attribute="Path"/>
        <RegExpr String="&lt;[a-zA-Z0-9._+\-]*(/[a-zA-Z0-9._+-]+)+&gt;" context="SearchPath" lookAhead="true"/>
        <RegExpr String="~(/[a-zA-Z0-9._+-]+)+" attribute="HomePath"/>
        <RegExpr String="[a-zA-Z][a-zA-Z0-9.+-]*:[a-zA-Z0-9%/?:@&amp;=$,_.!~*'+-]+" attribute="URI"/>
        <!--Operators-->
        <Detect2Chars char="|" char1="|" attribute="Operator"/>
        <Detect2Chars char="-" char1="&gt;" attribute="Operator"/>
        <Detect2Chars char="!" char1="=" attribute="Operator"/>
        <Detect2Chars char="&amp;" char1="&amp;" attribute="Operator"/>
        <AnyChar String=".-?*/+?&lt;&gt;" attribute="Operator"/>
        <keyword attribute="BuiltIn" context="#stay" String="NamespacedBuiltins"/>
        <keyword attribute="BuiltIn" context="#stay" String="SimpleBuiltins"/>
        <RegExpr String="&identifier;:" attribute="SimpleFunctionArgument"/>
        <Detect2Chars attribute="InterpolationDelimiter" context="Interpolation" char="$" char1="{"/>
        <StringDetect String="if" context="IfExpression" attribute="IfExpression"/>
        <WordDetect String="with" context="WithExpr" attribute="WithExpr"/>
        <WordDetect String="assert" context="AssertExpr" attribute="AssertExpr"/>
        <keyword attribute="Keyword" context="#stay" String="primitives"/>
        <Float attribute="Floating"/>
        <Int attribute="Decimal"/>
        <WordDetect attribute="Keyword" context="Let" String="let" beginRegion="Let"/>
        <RegExpr String="&identifier;" attribute="FunctionCall"/>
        <DetectChar char="(" attribute="Separator_Pair" context="Parentheses"/>
        <DetectChar attribute="SingleLineComment" context="singleLineComment" char="#"/>
        <Detect2Chars context="multiLineComment" char="/" char1="*"/>
        <DetectChar attribute="Separator_Pair" context="AttrSet" char="{" beginRegion="AttrSet"/>
        <DetectChar attribute="Separator_List" context="List" char="[" beginRegion="List"/>
        <DetectChar context="SimpleString" attribute="SimpleStringDelimiter" char="&quot;"/>
        <Detect2Chars context="IndentedString" attribute="IndentedStringDelimiter" char="'" char1="'"/>
        <DetectSpaces context="#stay" attribute="Normal"/>
      </context>
      <context attribute="Error" lineEndContext="#stay" name="AttributeAssignment">
        <IncludeRules context="Expression" includeAttrib="false"/>
        <DetectChar char=";" context="#pop" attribute="AttributeAssignment"/>
      </context>
      <context name="IfExpression" attribute="Error">
        <StringDetect String="then" attribute="IfExpression"/>
        <StringDetect String="else" attribute="IfExpression" context="#pop"/>
        <IncludeRules context="Expression" includeAttrib="false"/>
      </context>
      <context name="_AttributeDefinition" attribute="Error">
        <DetectChar attribute="SingleLineComment" context="singleLineComment" char="#"/>
        <Detect2Chars context="multiLineComment" char="/" char1="*"/>
        <WordDetect String="inherit" context="Inherit" attribute="Inherit"/>
        <Detect2Chars attribute="InterpolationDelimiter" context="Interpolation" char="$" char1="{"/>
        <RegExpr String="&identifier;" attribute="Attribute"/>
        <DetectChar char="&quot;" context="DefinitionString" attribute="DefinitionStringDelimiter"/>
        <DetectChar char="." attribute="AttributeDot"/>
        <DetectChar char="=" context="AttributeAssignment" attribute="AttributeAssignment"/>
        <DetectSpaces context="#stay" attribute="Normal"/>
      </context>
      <context name="SearchPath" attribute="SearchPath">
        <DetectChar char="&lt;" attribute="SearchPathDelimiter"/>
        <DetectChar char="&gt;" context="#pop" attribute="SearchPathDelimiter"/>
      </context>
      <context name="Inherit" attribute="Error">
        <DetectChar attribute="SingleLineComment" context="singleLineComment" char="#"/>
        <Detect2Chars context="multiLineComment" char="/" char1="*"/>
        <RegExpr String="&identifier;" attribute="Attribute"/>
        <DetectChar char="(" attribute="Inherit"/>
        <DetectChar char=")" attribute="Inherit"/>
        <DetectChar char="." attribute="AttributeDot"/>
        <DetectChar char=";" context="#pop" attribute="Inherit"/>
        <DetectSpaces attribute="Normal"/>
      </context>
      <context name="AttrSet" lineEndContext="#stay" attribute="Error">
        <IncludeRules context="_AttributeDefinition" includeAttrib="false"/>
        <!--TODO Find a way to actually handle multiline Function Arguments-->
        <DetectChar char="," attribute="Separator_Pair"/>
        <Detect2Chars context="#pop" char="}" char1=":" attribute="Separator_Pair" endRegion="AttrSet"/>
        <DetectChar char="}" context="#pop" endRegion="AttrSet" attribute="Separator_Pair"/>
      </context>
      <context name="WithExpr" lineEndContext="#stay" attribute="Error">
        <IncludeRules context="_AttributeDefinition" includeAttrib="false"/>
        <DetectChar char=";" context="#pop" attribute="WithExpr"/>
      </context>
      <context name="AssertExpr" lineEndContext="#stay" attribute="Error">
        <IncludeRules context="_AttributeDefinition" includeAttrib="false"/>
        <DetectChar char=";" context="#pop" attribute="AssertExpr"/>
      </context>
      <context name="Let">
        <WordDetect attribute="Keyword" context="#pop" String="in" endRegion="Let"/>
        <IncludeRules context="_AttributeDefinition" includeAttrib="false"/>
      </context>
      <context attribute="Error" lineEndContext="#stay" name="List">
        <IncludeRules context="Expression" includeAttrib="false"/>
        <DetectChar char="]" context="#pop" attribute="Separator_List" endRegion="List"/>
      </context>
      <context name="_String">
        <Detect2Chars attribute="SimpleStringEscape" char="\" char1="\"/>
        <Detect2Chars attribute="SimpleStringEscape" char="\" char1="n"/>
        <Detect2Chars attribute="SimpleStringEscape" char="\" char1="r"/>
        <Detect2Chars attribute="SimpleStringEscape" char="\" char1="\"/>
        <Detect2Chars attribute="SimpleStringEscape" char="\" char1="t"/>
        <Detect2Chars attribute="SimpleStringEscape" char="\" char1="&quot;"/>
        <Detect2Chars attribute="SimpleStringEscape" char="\" char1="$"/>
        <Detect2Chars attribute="SimpleStringEscape" char="$" char1="$"/>
        <RegExpr String="\\." attribute="InvalidSimpleStringEscape"/>
        <Detect2Chars attribute="InterpolationDelimiter" context="Interpolation" char="$" char1="{"/>
      </context>
      <context attribute="SimpleString" lineEndContext="#stay" name="SimpleString">
        <IncludeRules context="_String" includeAttrib="false"/>
        <DetectChar context="#pop" attribute="SimpleStringDelimiter" char="&quot;"/>
      </context>
      <context attribute="DefinitionString" lineEndContext="#stay" name="DefinitionString">
        <IncludeRules context="_String" includeAttrib="false"/>
        <DetectChar context="#pop" attribute="DefinitionStringDelimiter" char="&quot;"/>
      </context>
      <context attribute="IndentedString" lineEndContext="#stay" name="IndentedString">
        <StringDetect attribute="IndentedStringEscape" String="''\n"/>
        <StringDetect attribute="IndentedStringEscape" String="''\r"/>
        <StringDetect attribute="IndentedStringEscape" String="''\t"/>
        <StringDetect attribute="IndentedStringEscape" String="'''"/>
        <Detect2Chars attribute="SimpleStringEscape" char="$" char1="$"/>
        <RegExpr String="''\\." attribute="InvalidIndentedStringEscape"/>
        <Detect2Chars attribute="InterpolationDelimiter" context="Interpolation" char="$" char1="{"/>
        <Detect2Chars attribute="IndentedStringDelimiter" context="#pop" char="'" char1="'"/>
      </context>
      <context lineEndContext="#stay" name="Interpolation">
        <IncludeRules context="Expression" includeAttrib="false"/>
        <DetectChar attribute="InterpolationDelimiter" context="#pop" char="}"/>
      </context>
      <context attribute="SingleLineComment" lineEndContext="#pop" name="singleLineComment">
        <keyword attribute="Alert" String="alerts"/>
      </context>
      <context attribute="MultiLineComment" name="multiLineComment">
        <Detect2Chars context="#pop" char="*" char1="/"/>
      </context>
      <context lineEndContext="#stay" name="Parentheses">
        <IncludeRules context="Expression" includeAttrib="false"/>
        <DetectChar attribute="Separator_Pair" context="#pop" char=")"/>
      </context>
    </contexts>
    <itemDatas>
      <itemData name="Normal" defStyleNum="dsNormal"/>
      <itemData name="FunctionCall" defStyleNum="dsNormal"/>
      <itemData name="WithExpr" defStyleNum="dsKeyword"/>
      <itemData name="WithExpr" defStyleNum="dsKeyword"/>
      <itemData name="Error" defStyleNum="dsError"/>
      <itemData name="InvalidIndentedStringEscape" defStyleNum="dsError"/>
      <itemData name="InvalidSimpleStringEscape" defStyleNum="dsError"/>
      <itemData name="Alert" defStyleNum="dsAlert"/>
      <itemData name="SimpleFunctionArgument" defStyleNum="dsFunction"/>
      <itemData name="AttributeAssignment" defStyleNum="dsOthers" bold="true"/>
      <itemData name="Interpolation" defStyleNum="dsOthers" bold="true"/>
      <itemData name="Separator_Pair" defStyleNum="dsOthers" bold="true"/>
      <itemData name="InterpolationDelimiter" defStyleNum="dsOthers" bold="true"/>
      <itemData name="AttributeDot" defStyleNum="dsOthers" bold="true"/>
      <itemData name="SearchPathDelimiter" defStyleNum="dsImport" bold="true"/>
      <itemData name="Separator_List" defStyleNum="dsOthers" bold="true"/>
      <itemData name="Normal Text" defStyleNum="dsNormal"/>
      <itemData name="Keyword" defStyleNum="dsKeyword"/>
      <itemData name="Operator" defStyleNum="dsOperator"/>
      <itemData name="SimpleString" defStyleNum="dsString"/>
      <itemData name="IfExpression" defStyleNum="dsControlFlow"/>
      <itemData name="SimpleStringDelimiter" defStyleNum="dsString"/>
      <itemData name="DefinitionString" defStyleNum="dsSpecialString"/>
      <itemData name="DefinitionStringDelimiter" defStyleNum="dsSpecialString"/>
      <itemData name="SimpleStringEscape" defStyleNum="dsSpecialChar"/>
      <itemData name="IndentedStringEscape" defStyleNum="dsSpecialChar"/>
      <itemData name="Decimal" defStyleNum="dsDecVal"/>
      <itemData name="Floating" defStyleNum="dsFloat"/>
      <itemData name="Attribute" defStyleNum="dsVariable"/>
      <itemData name="Path" defStyleNum="dsImport"/>
      <itemData name="SearchPath" defStyleNum="dsImport"/>
      <itemData name="HomePath" defStyleNum="dsImport"/>
      <itemData name="URI" defStyleNum="dsImport"/>
      <itemData name="BuiltIn" defStyleNum="dsBuiltIn"/>
      <itemData name="Inherit" defStyleNum="dsImport"/>
      <itemData name="SingleLineComment" defStyleNum="dsComment"/>
      <itemData name="MultiLineComment" defStyleNum="dsComment"/>
      <itemData name="IndentedString" defStyleNum="dsVerbatimString"/>
      <itemData name="IndentedStringDelimiter" defStyleNum="dsVerbatimString"/>
    </itemDatas>
  </highlighting>
  <general>
    <comments>
      <comment name="singleLine" start="#"/>
      <comment name="multiLine" start="/*" end="*/" region="Comment"/>
    </comments>
    <keywords casesensitive="1" weakDeliminator="."/>
  </general>
</language>
<!-- kate: space-indent on; indent-width 2; -->
